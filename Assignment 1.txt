1. Explain the use of JavaScript ( or What you can do using a JavaScript)

Ans-  JavaScript is a scripting language used to develop web pages. Developed in Netscape, JS allows developers to create a dynamic and interactive web page to interact with visitors and execute complex actions. It also enables users to load content into a document without reloading the entire page

2. What is the difference between client-side and server-side?

Ans-  Client-side

Does not need interaction with the server
Runs on the user’s computer
Reduces load on the server’s proccessing unit
Languages used: HTML, CSS, JavaScript


Server-side

Requires interaction with the server
Runs on the web server
Allows the server to provide dynamic websites tailored to the user. Increases the processing load on server.
Languages used: PHP, ASP.net, Python

3. What is Nodejs?

Ans- Node.js is an open-source and cross-platform JavaScript runtime environment. It is a popular tool for almost any kind of project.

Node.js runs the V8 JavaScript engine, the core of Google Chrome, outside of the browser. This allows Node.js to be very performant.

Node. js is primarily used for non-blocking, event-driven servers, due to its single-threaded nature. It's used for traditional web sites and back-end API services, but was designed with real-time, push-based architectures in mind

4. Explain Scope in JavaScript

Ans- JavaScript has 3 types of scope:

Block scope
Function scope
Global scope

Block Scope :
Before ES6 (2015), JavaScript had only Global Scope and Function Scope.

ES6 introduced two important new JavaScript keywords: let and const.

These two keywords provide Block Scope in JavaScript.

Variables declared inside a { } block cannot be accessed from outside the block:

Example
{
  let x = 2;
}
// x can NOT be used here
Variables declared with the var keyword can NOT have block scope.

Variables declared inside a { } block can be accessed from outside the block.

Example
{
  var x = 2;
}
// x CAN be used here

Local  scope :
Variables declared within a JavaScript function, become LOCAL to the function.

Example
// code here can NOT use carName

function myFunction() {
  let carName = "Volvo";
  // code here CAN use carName
}

// code here can NOT use carName


JavaScript has function scope: Each function creates a new scope.

Variables defined inside a function are not accessible (visible) from outside the function.

Variables declared with var, let and const are quite similar when declared inside a function.

They all have Function Scope:

function myFunction() {
  var carName = "Volvo";   // Function Scope
}
function myFunction() {
  let carName = "Volvo";   // Function Scope
}
function myFunction() {
  const carName = "Volvo";   // Function Scope
}


Global Scope:

Variables declared Globally (outside any function) have Global Scope.

Global variables can be accessed from anywhere in a JavaScript program.

Variables declared with var, let and const are quite similar when declared outside a block.

They all have Global Scope:

var x = 2;       // Global scope
let x = 2;       // Global scope
const x = 2;       // Global scope

5. JavaScript is asynchronous or synchronous

Ans-  Javascript is asynchronous.


6. JavaScript is Single-threaded or Multi-threaded.

Ans-  Javascript is single-threaded.

7. Explain DOM in your own word?

Ans- The Document Object Model (DOM) is a programming API for HTML and XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated. In the DOM specification, the term "document" is used in the broad sense - increasingly, XML is being used as a way of representing many different kinds of information that may be stored in diverse systems, and much of this would traditionally be seen as data rather than as documents. Nevertheless, XML presents this data as documents, and the DOM may be used to manage this data



